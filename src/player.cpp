
#include "raylib.h"
#include "rcamera.h"
#include "player.h"

Player::Player()
{
    // Camera Setup
    camera = {0};
    camera.position = (Vector3){0.0f, 2.0f, 4.0f}; // Camera position
    camera.target = (Vector3){0.0f, 2.0f, 0.0f};   // Camera looking at point
    camera.up = (Vector3){0.0f, 1.0f, 0.0f};       // Camera up vector (rotation towards target)
    camera.fovy = 60.0f;                           // Camera field-of-view Y
    camera.projection = CAMERA_PERSPECTIVE;        // Camera projection type

    // Velocity Setup
    walkingVelocity = 0.1f;
    mouseVelocity = 0.05f;

    stance = STANCE_UPRIGHT;

    // Buffers
    stanceBuffer = 0.15f; // Cooldown timer in seconds player can make another stance actions
    stanceTimer = 0.0f;  // time in seconds since last stance action
}

Camera Player::getCamera()
{
    return camera;
}

void Player::updateCamera(float frameTime)
{

    Vector3 movement = {0.0f, 0.0f, 0.0f};
    movement.x = IsKeyDown(KEY_W) * walkingVelocity - IsKeyDown(KEY_S) * walkingVelocity;
    movement.y = IsKeyDown(KEY_D) * walkingVelocity - IsKeyDown(KEY_A) * walkingVelocity;
    movement.z = updateStance(frameTime);

    UpdateCameraPro(
        &camera,
        movement,
        (Vector3){
            GetMouseDelta().x * mouseVelocity, // Rotation: yaw
            GetMouseDelta().y * mouseVelocity, // Rotation: pitch
            0.0f                               // Rotation: roll
        },
        GetMouseWheelMove() * 2.0f // Move to target (zoom)
    );
}

/// @brief Update player stance (stading up, crouched or laying on the ground)
/// @param frameTime times in seconds since last frame. Pass number generated by GetFrameTime
/// @return float: Change in movement. Zero - no stance change. Positive - Stading up. Negative - Laying down.
float Player::updateStance(float frameTime)
{

    if (IsKeyDown(KEY_LEFT_CONTROL) && (stance == STANCE_UPRIGHT || stance == STANCE_CROUCH || stance == STANCE_GROUND))
    {
        switch (stance)
        {
        case STANCE_UPRIGHT:
            stance = STANCE_CROUCHING;
            stanceTimer = 0.0f;
            return -1.0f;

        case STANCE_CROUCH:
            stance = STANCE_STANDING_UP;
            stanceTimer = 0.0f;
            return 1.0f;

        case STANCE_GROUND:
            stance = STANCE_CROUCHING;
            stanceTimer = 0.0f;
            return 0.9f;

        default:
            return 0.0f;
        }
    }
    else if (IsKeyDown(KEY_Z) && (stance == STANCE_UPRIGHT || stance == STANCE_CROUCH || stance == STANCE_GROUND))
    {
        switch (stance)
        {
        case STANCE_UPRIGHT:
            stance = STANCE_UPRIGHT_LAYING_ON_GROUND;
            stanceTimer = 0.0f;
            return -1.0f;

        case STANCE_CROUCH:
            stance = STANCE_LAYING_ON_GROUND;
            stanceTimer = 0.0f;
            return -0.9f;

        case STANCE_GROUND:
            stance = STANCE_GROUND_STANDING_UP;
            stanceTimer = 0.0f;
            return 0.9f;

        default:
            return 0.0f;
        }
    }

    switch (stance)
    {
    case STANCE_STANDING_UP:
        stanceTimer += frameTime;
        if (stanceTimer > stanceBuffer)
        {
            stance = STANCE_UPRIGHT;
        }
        break;

    case STANCE_CROUCHING:
        stanceTimer += frameTime;
        if (stanceTimer > stanceBuffer)
        {
            stance = STANCE_CROUCH;
        }
        break;

    case STANCE_LAYING_ON_GROUND:
        stanceTimer += frameTime;
        if (stanceTimer > stanceBuffer)
        {
            stance = STANCE_GROUND;
        }
        break;

    case STANCE_UPRIGHT_LAYING_ON_GROUND:
        stanceTimer += frameTime;
        if (stanceTimer > stanceBuffer)
        {
            if (camera.position.y == 1.0f)
            {
                stanceTimer = 0.0f;
                return -0.9f;
            }
            else
            {
                stance = STANCE_GROUND;
            }
        }
        break;

    case STANCE_GROUND_STANDING_UP:
        stanceTimer += frameTime;
        if (stanceTimer > stanceBuffer)
        {
            if (camera.position.y == 1.0f)
            {
                stanceTimer = 0.0f;
                return 1.0f;
            }
            else
            {
                stance = STANCE_UPRIGHT;
            }
        }
        break;
    }

    return 0.0f;
}